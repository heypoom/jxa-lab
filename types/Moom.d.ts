
export namespace Moom {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application's top-level scripting object.
  */
 export interface Application {
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * Is this the active application?
    */
   frontmost(): boolean;
   /**
    * The version number of the application.
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A window.
  */
 export interface Window {
   /**
    * The title of the window.
    */
   name(): string;
   /**
    * The unique identifier of the window.
    */
   id(): number;
   /**
    * The index of the window, ordered front to back.
    */
   index(): number;
   /**
    * The bounding rectangle of the window.
    */
   bounds(): any;
   /**
    * Does the window have a close button?
    */
   closeable(): boolean;
   /**
    * Does the window have a minimize button?
    */
   miniaturizable(): boolean;
   /**
    * Is the window minimized right now?
    */
   miniaturized(): boolean;
   /**
    * Can the window be resized?
    */
   resizable(): boolean;
   /**
    * Is the window visible right now?
    */
   visible(): boolean;
   /**
    * Does the window have a zoom button?
    */
   zoomable(): boolean;
   /**
    * Is the window zoomed right now?
    */
   zoomed(): boolean;
 }
    
    // CLass Extension
    
    // Records

    // Function options



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the object(s).
       */
      to: any;
    }








}
export interface Moom extends Moom.Application {
    // Functions

     /**
      * Open a file.
      * @param directParameter The file(s) to be opened.
      * 
      */
     open(directParameter: {}, ): void;

     /**
      * Close a window
      * @param directParameter the window(s) to close.
      * 
      */
     close(directParameter: any, ): void;

     /**
      * Quit the application.

      * 
      */
     quit(): void;

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter The objects to be counted.
      * @param option
      * @return The count.
      */
     count(directParameter: any, option?: Moom.CountOptionalParameter): number;

     /**
      * Verify that an object exists.
      * @param directParameter The object(s) to check.
      * @return Did the object(s) exist?
      */
     exists(directParameter: any, ): boolean;

     /**
      * Move an object to a new location.
      * @param directParameter The object(s) to move.
      * @param option
      * 
      */
     move(directParameter: any, option?: Moom.MoveOptionalParameter): void;

     /**
      * Centers the frontmost window the way macOS would.

      * 
      */
     centerFrontmostWindow(): void;

     /**
      * Positions the frontmost window at the actual center of the screen's available area.

      * 
      */
     centerFrontmostWindowGeometrically(): void;

     /**
      * Returns a list of “Arrange Windows” custom control names. You can use these in Moom's other snapshot-related AppleScript commands.

      * @return The names.
      */
     listOfSnapshots(): any;

     /**
      * Save window layout and merge with the existing snapshot of the same name. Creates a new snapshot if the specified shapshot doesn't exist yet.
      * @param directParameter Snapshot name (case-sensitive).
      * 
      */
     saveWindowLayoutAndMergeWithSnapshot(directParameter: string, ): void;

     /**
      * Save window layout and replace the existing snapshot with the same name. Creates a new snapshot if the specified shapshot doesn't exist yet.
      * @param directParameter Snapshot name (case-sensitive).
      * 
      */
     saveWindowLayoutAndReplaceSnapshot(directParameter: string, ): void;

     /**
      * Arrange windows according to the specified snapshot.
      * @param directParameter Snapshot name (case-sensitive).
      * 
      */
     arrangeWindowsAccordingToSnapshot(directParameter: string, ): void;

     /**
      * Arrange windows according to the specified snapshot. (Deprecated. Same as the “arrange windows according to snapshot” command, which has a name that's more consistent with Moom's other snapshot-related commands.)
      * @param directParameter Snapshot name (case-sensitive).
      * 
      */
     arrangeWindowsAccordingToSnapshotNamed(directParameter: string, ): void;
}
