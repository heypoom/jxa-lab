
export namespace Spotify {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The Spotify application.
  */
 export interface Application {
   /**
    * The current playing track.
    */
   currentTrack(): any;
   /**
    * The sound output volume (0 = minimum, 100 = maximum)
    */
   soundVolume(): number;
   /**
    * Is Spotify stopped, paused, or playing?
    */
   playerState(): any;
   /**
    * The playerâ€™s position within the currently playing track in seconds.
    */
   playerPosition(): any;
   /**
    * Is repeating enabled in the current playback context?
    */
   repeatingEnabled(): boolean;
   /**
    * Is repeating on or off?
    */
   repeating(): boolean;
   /**
    * Is shuffling enabled in the current playback context?
    */
   shufflingEnabled(): boolean;
   /**
    * Is shuffling on or off?
    */
   shuffling(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A Spotify track.
  */
 export interface Track {
   /**
    * The artist of the track.
    */
   artist(): string;
   /**
    * The album of the track.
    */
   album(): string;
   /**
    * The disc number of the track.
    */
   discNumber(): number;
   /**
    * The length of the track in seconds.
    */
   duration(): number;
   /**
    * The number of times this track has been played.
    */
   playedCount(): number;
   /**
    * The index of the track in its album.
    */
   trackNumber(): number;
   /**
    * Is the track starred?
    */
   starred(): boolean;
   /**
    * How popular is this track? 0-100
    */
   popularity(): number;
   /**
    * The ID of the item.
    */
   id(): string;
   /**
    * The name of the track.
    */
   name(): string;
   /**
    * The URL of the track%apos;s album cover.
    */
   artworkUrl(): string;
   /**
    * The property is deprecated and will never be set. Use the 'artwork url' instead.
    */
   artwork(): any;
   /**
    * That album artist of the track.
    */
   albumArtist(): string;
   /**
    * The URL of the track.
    */
   spotifyUrl(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application's top level scripting object.
  */
 export interface Application {
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * Is this the frontmost (active) application?
    */
   frontmost(): boolean;
   /**
    * The version of the application.
    */
   version(): string;
 }
    
    // CLass Extension
    
    // Records

    // Function options





    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PlayTrackOptionalParameter {
      /**
       * the URI of the context to play in
       */
      inContext?: string;
    }

}
export interface Spotify extends Spotify.Application {
    // Functions

     /**
      * Skip to the next track.

      * 
      */
     nextTrack(): void;

     /**
      * Skip to the previous track.

      * 
      */
     previousTrack(): void;

     /**
      * Toggle play/pause.

      * 
      */
     playpause(): void;

     /**
      * Pause playback.

      * 
      */
     pause(): void;

     /**
      * Resume playback.

      * 
      */
     play(): void;

     /**
      * Start playback of a track in the given context.
      * @param directParameter the URI of the track to play
      * @param option
      * 
      */
     playTrack(directParameter: string, option?: Spotify.PlayTrackOptionalParameter): void;
}
