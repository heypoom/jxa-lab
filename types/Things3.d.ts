
export namespace Things3 {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A window.
  */
 export interface Window {
   /**
    * The full title of the window.
    */
   name(): string;
   /**
    * The unique identifier of the window.
    */
   id(): number;
   /**
    * The index of the window, ordered front to back.
    */
   index(): number;
   /**
    * The bounding rectangle of the window.
    */
   bounds(): any;
   /**
    * Whether the window has a close box.
    */
   closeable(): boolean;
   /**
    * Whether the window can be minimized.
    */
   minimizable(): boolean;
   /**
    * Whether the window is currently minimized.
    */
   minimized(): boolean;
   /**
    * Whether the window can be resized.
    */
   resizable(): boolean;
   /**
    * Whether the window is currently visible.
    */
   visible(): boolean;
   /**
    * Whether the window can be zoomed.
    */
   zoomable(): boolean;
   /**
    * Whether the window is currently zoomed.
    */
   zoomed(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application's top-level scripting object.
  */
 export interface Application {
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * Is this the frontmost (active) application?
    */
   frontmost(): boolean;
   /**
    * The version of the application.
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a Things area of responsibility.
  */
 export interface Area {
   /**
    * Tag names separated by comma
    */
   tagNames(): string;
   /**
    * Is this area collapsed?
    */
   collapsed(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a Things list.
  */
 export interface List {
   /**
    * The unique identifier of the list.
    */
   id(): string;
   /**
    * Name of the list
    */
   name(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a Things contact.
  */
 export interface Contact {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a Things project.
  */
 export interface Project {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a Things tag.
  */
 export interface Tag {
   /**
    * The unique identifier of the tag.
    */
   id(): string;
   /**
    * Name of the tag
    */
   name(): string;
   /**
    * Keyboard shortcut for the tag
    */
   keyboardShortcut(): string;
   /**
    * Parent tag
    */
   parentTag(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a Things to do.
  */
 export interface ToDo {
   /**
    * The unique identifier of the to do.
    */
   id(): string;
   /**
    * Name of the to do
    */
   name(): string;
   /**
    * Creation date of the to do
    */
   creationDate(): any;
   /**
    * Modification date of the to do
    */
   modificationDate(): any;
   /**
    * Due date of the to do
    */
   dueDate(): any;
   /**
    * Activation date of the scheduled to do
    */
   activationDate(): any;
   /**
    * Completion date of the to do
    */
   completionDate(): any;
   /**
    * Cancellation date of the to do
    */
   cancellationDate(): any;
   /**
    * Status of the to do
    */
   status(): any;
   /**
    * Tag names separated by comma
    */
   tagNames(): string;
   /**
    * Notes of the to do
    */
   notes(): string;
   /**
    * Project the to do belongs to
    */
   project(): any;
   /**
    * Area the to do belongs to
    */
   area(): any;
   /**
    * Contact the to do is assigned to
    */
   contact(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents a to do selected in Things UI.
  */
 export interface SelectedToDo {}
    
    // CLass Extension
    
    // Records
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface PrintSettings {
   /**
    * the number of copies of a document to be printed
    */
   copies(): number;
   /**
    * Should printed copies be collated?
    */
   collating(): boolean;
   /**
    * the first page of the document to be printed
    */
   startingPage(): number;
   /**
    * the last page of the document to be printed
    */
   endingPage(): number;
   /**
    * number of logical pages laid across a physical page
    */
   pagesAcross(): number;
   /**
    * number of logical pages laid out down a physical page
    */
   pagesDown(): number;
   /**
    * how errors are handled
    */
   errorHandling(): any;
   /**
    * for fax number
    */
   faxNumber(): string;
   /**
    * for target printer
    */
   targetPrinter(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface ItemDetails {
   /**
    * Name
    */
   name(): string;
   /**
    * Notes
    */
   notes(): string;
   /**
    * Due date
    */
   dueDate(): any;
   /**
    * Tag names
    */
   tagNames(): string;
 }

    // Function options

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintOptionalParameter {
      /**
       * The print settings to use.
       */
      withProperties?: any;
      /**
       * Should the application show the print dialog?
       */
      printDialog?: boolean;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * The location for the new object(s).
       */
      to?: any;
      /**
       * Properties to be set in the new duplicated object(s).
       */
      withProperties?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object.
       */
      new: any;
      /**
       * The location at which to insert the object.
       */
      at?: any;
      /**
       * The initial values for properties of the object.
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ShowQuickEntryPanelOptionalParameter {
      /**
       * Invoke autofill feature before showing the panel
       */
      withAutofill?: boolean;
      /**
       * Properties for new to do. Ignored if using autofill.
       */
      withProperties?: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * List to use as target
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ScheduleOptionalParameter {
      /**
       * Date to schedule a to do for.
       */
      for: any;
    }





}
export interface Things3 extends Things3.Application {
    // Functions

     /**
      * Close a window.
      * @param directParameter the window(s) to close.
      * 
      */
     close(directParameter: any, ): void;

     /**
      * Print a document.
      * @param directParameter The file(s), document(s), or window(s) to be printed.
      * @param option
      * 
      */
     print(directParameter: {}, option?: Things3.PrintOptionalParameter): void;

     /**
      * Quit the application.

      * 
      */
     quit(): void;

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter the object whose elements are to be counted
      * @param option
      * @return the number of elements
      */
     count(directParameter: any, option?: Things3.CountOptionalParameter): number;

     /**
      * Delete an object.
      * @param directParameter the object to delete
      * 
      */
     delete(directParameter: any, ): void;

     /**
      * Copy object(s) and put the copies at a new location.
      * @param directParameter the object(s) to duplicate
      * @param option
      * @return the duplicated object(s)
      */
     duplicate(directParameter: any, option?: Things3.DuplicateOptionalParameter): any;

     /**
      * Verify if an object exists.
      * @param directParameter the object in question
      * @return true if it exists, false if not
      */
     exists(directParameter: any, ): boolean;

     /**
      * Make a new object.

      * @param option
      * @return to the new object
      */
     make(option?: Things3.MakeOptionalParameter): any;

     /**
      * Show Things Quick Entry panel

      * @param option
      * 
      */
     showQuickEntryPanel(option?: Things3.ShowQuickEntryPanelOptionalParameter): void;

     /**
      * Show Things item in the UI
      * @param directParameter Item to show
      * 
      */
     show(directParameter: {}, ): void;

     /**
      * Edit Things to do
      * @param directParameter To do to edit
      * 
      */
     edit(directParameter: {}, ): void;

     /**
      * Move a to do to a different list.
      * @param directParameter the to do(s) to move
      * @param option
      * 
      */
     move(directParameter: any, option?: Things3.MoveOptionalParameter): void;

     /**
      * Schedules a Things to do
      * @param directParameter To do to schedule
      * @param option
      * 
      */
     schedule(directParameter: {}, option?: Things3.ScheduleOptionalParameter): void;

     /**
      * Log completed items now

      * 
      */
     logCompletedNow(): void;

     /**
      * Empty Things trash

      * 
      */
     emptyTrash(): void;

     /**
      * Add a contact to Things from your Address Book
      * @param directParameter Name of Address Book contact
      * @return New contact
      */
     addContactNamed(directParameter: {}, ): Things3.Contact;

     /**
      * Add new Things to do from input in Quicksilver syntax
      * @param directParameter To do description
      * @return New to do
      */
     parseQuicksilverInput(directParameter: {}, ): Things3.ToDo;
}
