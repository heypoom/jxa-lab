
export namespace Xcode {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application's top-level scripting object.
  */
 export interface Application {
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * Is this the active application?
    */
   frontmost(): boolean;
   /**
    * The version number of the application.
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A document.
  */
 export interface Document {
   /**
    * Its name.
    */
   name(): string;
   /**
    * Has it been modified since the last save?
    */
   modified(): boolean;
   /**
    * Its location on disk, if it has one.
    */
   file(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A window.
  */
 export interface Window {
   /**
    * The title of the window.
    */
   name(): string;
   /**
    * The unique identifier of the window.
    */
   id(): number;
   /**
    * The index of the window, ordered front to back.
    */
   index(): number;
   /**
    * The bounding rectangle of the window.
    */
   bounds(): any;
   /**
    * Does the window have a close button?
    */
   closeable(): boolean;
   /**
    * Does the window have a minimize button?
    */
   miniaturizable(): boolean;
   /**
    * Is the window minimized right now?
    */
   miniaturized(): boolean;
   /**
    * Can the window be resized?
    */
   resizable(): boolean;
   /**
    * Is the window visible right now?
    */
   visible(): boolean;
   /**
    * Does the window have a zoom button?
    */
   zoomable(): boolean;
   /**
    * Is the window zoomed right now?
    */
   zoomed(): boolean;
   /**
    * The document whose contents are displayed in the window.
    */
   document(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A document that represents a file on disk. It also provides access to the window it appears in.
  */
 export interface FileDocument {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A document that represents a text file on disk. It also provides access to the window it appears in.
  */
 export interface TextDocument {
   /**
    * The first and last character positions in the selection.
    */
   selectedCharacterRange(): any;
   /**
    * The first and last paragraph positions that contain the selection.
    */
   selectedParagraphRange(): any;
   /**
    * The text of the text file referenced.
    */
   text(): string;
   /**
    * Should Xcode notify other apps when this document is closed?
    */
   notifiesWhenClosing(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A document that represents a source file on disk. It also provides access to the window it appears in.
  */
 export interface SourceDocument {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A document that represents a workspace on disk. Workspaces are the top-level container for almost all objects and commands in Xcode.
  */
 export interface WorkspaceDocument {
   /**
    * Whether the workspace document has finsished loading after being opened. Messages sent to a workspace document before it has loaded will result in errors.
    */
   loaded(): boolean;
   /**
    * The workspace's scheme that will be used for scheme actions.
    */
   activeScheme(): any;
   /**
    * The workspace's run destination that will be used for scheme actions.
    */
   activeRunDestination(): any;
   /**
    * The scheme action result for the last scheme action command issued to the workspace document.
    */
   lastSchemeActionResult(): any;
   /**
    * The workspace document's location on disk, if it has one.
    */
   file(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An object describing the result of performing a scheme action command.
  */
 export interface SchemeActionResult {
   /**
    * The unique identifier for the scheme.
    */
   id(): string;
   /**
    * Whether this scheme action has completed (sucessfully or otherwise) or not.
    */
   completed(): boolean;
   /**
    * Indicates the status of the scheme action.
    */
   status(): any;
   /**
    * If the result's status is "error occurred", this will be the error message; otherwise, this will be "missing value".
    */
   errorMessage(): string;
   /**
    * If this scheme action performed a build, this will be the text of the build log.
    */
   buildLog(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An issue (like an error or warning) generated by a scheme action.
  */
 export interface SchemeActionIssue {
   /**
    * The text of the issue.
    */
   message(): string;
   /**
    * The file path where the issue occurred. This may be 'missing value' if the issue is not associated with a specific source file.
    */
   filePath(): string;
   /**
    * The starting line number in the file where the issue occurred. This may be 'missing value' if the issue is not associated with a specific source file.
    */
   startingLineNumber(): number;
   /**
    * The ending line number in the file where the issue occurred. This may be 'missing value' if the issue is not associated with a specific source file.
    */
   endingLineNumber(): number;
   /**
    * The starting column number in the file where the issue occurred. This may be 'missing value' if the issue is not associated with a specific source file.
    */
   startingColumnNumber(): number;
   /**
    * The ending column number in the file where the issue occurred. This may be 'missing value' if the issue is not associated with a specific source file.
    */
   endingColumnNumber(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An error generated by a build.
  */
 export interface BuildError {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A warning generated by a build.
  */
 export interface BuildWarning {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A warning generated by the static analyzer.
  */
 export interface AnalyzerIssue {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A failure from a test.
  */
 export interface TestFailure {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A set of parameters for building, testing, launching or distributing the products of a workspace.
  */
 export interface Scheme {
   /**
    * The name of the scheme.
    */
   name(): string;
   /**
    * The unique identifier for the scheme.
    */
   id(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An object which specifies parameters such as the device and architecture for which to perform a scheme action.
  */
 export interface RunDestination {
   /**
    * The name of the run destination, as displayed in Xcode's interface.
    */
   name(): string;
   /**
    * The architecture for which this run destination results in execution.
    */
   architecture(): string;
   /**
    * The identifier of the platform which this run destination targets, such as "macosx", "iphoneos", "iphonesimulator", etc .
    */
   platform(): string;
   /**
    * The physical or virtual device which this run destination targets.
    */
   device(): any;
   /**
    * If the run destination's device has a companion (e.g. a paired watch for a phone) which it will use, this is that device.
    */
   companionDevice(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A device which can be used as the target for a scheme action, as part of a run destination.
  */
 export interface Device {
   /**
    * The name of the device.
    */
   name(): string;
   /**
    * A stable identifier for the device, as shown in Xcode's "Devices" window.
    */
   deviceIdentifier(): string;
   /**
    * The version of the operating system installed on the device which this run destination targets.
    */
   operatingSystemVersion(): string;
   /**
    * The model of device (e.g. "iPad Air") which this run destination targets.
    */
   deviceModel(): string;
   /**
    * Whether this run destination is generic instead of representing a specific device. Most destinations are not generic, but a generic destination (such as "Generic iOS Device") will be available for some platforms if no physical devices are connected.
    */
   generic(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A set of build settings for a target or project. Each target in a project has the same named build configurations as the project.
  */
 export interface BuildConfiguration {
   /**
    * The unique identifier for the build configuration.
    */
   id(): string;
   /**
    * The name of the build configuration.
    */
   name(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An Xcode project. Projects represent project files on disk and are always open in the context of a workspace document.
  */
 export interface Project {
   /**
    * The name of the project
    */
   name(): string;
   /**
    * The unique identifier for the project.
    */
   id(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A setting that controls how products are built.
  */
 export interface BuildSetting {
   /**
    * The unlocalized build setting name (e.g. DSTROOT).
    */
   name(): string;
   /**
    * A string value for the build setting.
    */
   value(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An object that represents a resolved value for a build setting.
  */
 export interface ResolvedBuildSetting {
   /**
    * The unlocalized build setting name (e.g. DSTROOT).
    */
   name(): string;
   /**
    * A string value for the build setting.
    */
   value(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A target is a blueprint for building a product. Targets inherit build settings from their project if not overridden in the target.
  */
 export interface Target {
   /**
    * The name of this target.
    */
   name(): string;
   /**
    * The unique identifier for the target.
    */
   id(): string;
   /**
    * The project that contains this target
    */
   project(): any;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The Xcode application.
  */
 export interface Application {
   /**
    * The active workspace document in Xcode.
    */
   activeWorkspaceDocument(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An Xcode-compatible document.
  */
 export interface Document {
   /**
    * The document's path.
    */
   path(): string;
 }
    
    // Records
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface EnvironmentVariable {
   /**
    * The name of the environment variable.
    */
   variableName(): string;
   /**
    * The value of the environment variable.
    */
   variableValue(): string;
 }

    // Function options

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CloseOptionalParameter {
      /**
       * Should changes be saved before closing?
       */
      saving?: any;
      /**
       * The file in which to save the document, if so.
       */
      savingIn?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface QuitOptionalParameter {
      /**
       * Should changes be saved before quitting?
       */
      saving?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object.
       */
      new: any;
      /**
       * The location at which to insert the object.
       */
      at?: any;
      /**
       * The initial contents of the object.
       */
      withData?: any;
      /**
       * The initial values for properties of the object.
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the object(s).
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface HackOptionalParameter {
      /**
       * The document to display.
       */
      document: any;
      /**
       * The start line of the part of the document to display.
       */
      start: number;
      /**
       * The stop line of the part of the document to display.
       */
      stop: number;
    }




    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface RunOptionalParameter {
      /**
       * Additional command line arguments to pass to the action.
       */
      withCommandLineArguments?: any;
      /**
       * Additional environment variables to set for the action.
       */
      withEnvironmentVariables?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface TestOptionalParameter {
      /**
       * Additional command line arguments to pass to the action.
       */
      withCommandLineArguments?: any;
      /**
       * Additional environment variables to set for the action.
       */
      withEnvironmentVariables?: any;
    }

}
export interface Xcode extends Xcode.Application {
    // Functions

     /**
      * Open a document.
      * @param directParameter The file(s) to be opened.
      * @return The opened document(s).
      */
     open(directParameter: {}, ): void;

     /**
      * Close a document.
      * @param directParameter the document(s) or window(s) to close.
      * @param option
      * 
      */
     close(directParameter: any, option?: Xcode.CloseOptionalParameter): void;

     /**
      * Quit the application.

      * @param option
      * 
      */
     quit(option?: Xcode.QuitOptionalParameter): void;

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter The objects to be counted.
      * @param option
      * @return The count.
      */
     count(directParameter: any, option?: Xcode.CountOptionalParameter): number;

     /**
      * Delete an object.
      * @param directParameter The object(s) to delete.
      * 
      */
     delete(directParameter: any, ): void;

     /**
      * Verify that an object exists.
      * @param directParameter The object(s) to check.
      * @return Did the object(s) exist?
      */
     exists(directParameter: any, ): boolean;

     /**
      * Create a new object.

      * @param option
      * @return The new object.
      */
     make(option?: Xcode.MakeOptionalParameter): any;

     /**
      * Move an object to a new location.
      * @param directParameter The object(s) to move.
      * @param option
      * 
      */
     move(directParameter: any, option?: Xcode.MoveOptionalParameter): void;

     /**
      * Sets the selection to the line range of the document, and makes it visible in the graphical user interface.

      * @param option
      * @return The document.
      */
     hack(option?: Xcode.HackOptionalParameter): void;

     /**
      * Invoke the "build" scheme action. This command should be sent to a workspace document. The build will be performed using the workspace document's current active scheme and active run destination. This command does not wait for the action to complete; its progress can be tracked with the returned scheme action result.
      * @param directParameter the object for the command
      * @return A result object which can be used to track the progress of this command and see its results.
      */
     build(directParameter: any, ): Xcode.SchemeActionResult;

     /**
      * Invoke the "clean" scheme action. This command should be sent to a workspace document. The clean will be performed using the workspace document's current active scheme and active run destination. This command does not wait for the action to complete; its progress can be tracked with the returned scheme action result.
      * @param directParameter the object for the command
      * @return A result object which can be used to track the progress of this command and see its results.
      */
     clean(directParameter: any, ): Xcode.SchemeActionResult;

     /**
      * Stop the active scheme action, if one is running. This command should be sent to a workspace document. This command does not wait for the action to stop.
      * @param directParameter the object for the command
      * 
      */
     stop(directParameter: any, ): void;

     /**
      * Invoke the "run" scheme action. This command should be sent to a workspace document. The run action will be performed using the workspace document's current active scheme and active run destination. This command does not wait for the action to complete; its progress can be tracked with the returned scheme action result.
      * @param directParameter the object for the command
      * @param option
      * @return A result object which can be used to track the progress of this command and see its results.
      */
     run(directParameter: any, option?: Xcode.RunOptionalParameter): Xcode.SchemeActionResult;

     /**
      * Invoke the "test" scheme action. This command should be sent to a workspace document. The test action will be performed using the workspace document's current active scheme and active run destination. This command does not wait for the action to complete; its progress can be tracked with the returned scheme action result.
      * @param directParameter the object for the command
      * @param option
      * @return A result object which can be used to track the progress of this command and see its results.
      */
     test(directParameter: any, option?: Xcode.TestOptionalParameter): Xcode.SchemeActionResult;
}
